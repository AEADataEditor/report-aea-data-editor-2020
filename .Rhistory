yq=paste(year(date_updated),quarter(date_updated),sep="Q")) %>%
select(ticket,mcrec,Journal,date_updated,yq)
summary_recommendation <- recommendation %>%
group_by(mcrec) %>%
summarise(n_issues = n_distinct(ticket))
# Histogram
n_recommendation_plot <- ggplot(summary_recommendation, aes(x = mcrec, y = n_issues)) +
geom_bar(stat = "identity", colour="white", fill="grey") +
labs(x = "Recommendation", y = "Number of issues", title = "Number of issues by recommendation") +
theme_classic() +
coord_flip()
n_recommendation_plot_evo <- ggplot(recommendation %>% filter(yq > "2019Q4"), aes(x = yq)) +
geom_bar(aes(fill=mcrec),position="fill",colour="white") +
labs(x = "Recommendation", y = "Number of issues", title = "Number of issues by recommendation") +
theme_classic() +
coord_flip()
ggsave(file.path(images,"n_recommendation_plot.png"),
n_recommendation_plot  +
labs(y=element_blank(),title=element_blank()))
n_recommendation_plot
ggsave(file.path(images,"n_recommendation_plot_evo.png"),
n_recommendation_plot_evo  +
labs(y=element_blank(),title=element_blank()))
#### Length of author responses (time between filing report of first assessment, and getting the next submission)
author_length <- jira.pyear %>%
filter(mc_number_anon != "",
ticket != mc_number_anon,
!grepl("#",mc_number_anon, fixed = TRUE)) %>%
filter(Status=="Open"| Status=="Submitted to MC") %>%
select(ticket, mc_number_anon, date_created, date_updated,Status, Journal) %>%
distinct()
al1 <- author_length %>%
filter(Status=="Submitted to MC") %>%
arrange(ticket, date_updated, Status) %>%
group_by(ticket) %>%
mutate(status_order =  row_number(), st = "Status", st2 = "date_updated") %>%
mutate(new1 = paste(st, status_order, sep="")) %>%
mutate(new2 = paste(st2, status_order, sep="")) %>%
select(ticket,new1,Status) %>%
pivot_wider(names_from = new1, values_from = "Status") %>%
rename(Status=Status1) %>%
select(!Status2)
al2 <- author_length %>%
filter(Status=="Submitted to MC") %>%
arrange(ticket, date_updated, Status) %>%
group_by(ticket) %>%
mutate(status_order =  row_number(), st = "Status", st2 = "date_updated") %>%
mutate(new1 = paste(st, status_order, sep="")) %>%
mutate(new2 = paste(st2, status_order, sep="")) %>%
select(ticket,new2,date_updated) %>%
pivot_wider(names_from = new2, values_from = "date_updated")%>%
rename(date_updated=date_updated1) %>%
select(!date_updated2)
author_length <- author_length %>%
select(ticket,mc_number_anon, date_created, Journal) %>%
distinct(ticket, .keep_all = TRUE) %>%
left_join(al1,by="ticket") %>%
left_join(al2,by="ticket") %>%
group_by(mc_number_anon) %>%
arrange(mc_number_anon,date_created) %>%
mutate(rounds_tot = n_distinct(ticket),
round =  row_number(),
round_start = date_created,
round_end = date_updated,
round_end_previous = lag(round_end),
length=difftime(round_start,round_end_previous,units="days")) %>%
ungroup
# Histogram
#geom_histogram(aes(y=..density..), colour="white", fill="grey", binwidth = 5)+
author_response_length <- ggplot(author_length, aes(x = length)) +
geom_histogram(aes(y=..density..), colour="white", fill="grey", binwidth = 5)+
geom_density(alpha=.2, fill = "black", col="black") +
theme_classic() +
scale_colour_brewer(palette = "Paired") +
labs(x = "Days", y = "Density", title = "Length of author responses")
ggsave(file.path(images,"author_response_length.png"),
author_response_length +
labs(y=element_blank(),title=element_blank()))
author_response_length
#### Distribution of rounds each paper goes through
## THIS NEEDS DATA FROM BEFORE DEC 2019 - jira.pyear is not the right data.
## Total
n_rounds <- jira.pyear %>%
mutate(completed = ifelse(grepl("Pending publication", Status, fixed = TRUE) == TRUE, 1, 0)) %>%
group_by(mc_number_anon) %>%
mutate(paper_completed = max(completed)) %>%
ungroup %>%
filter(paper_completed == 1) %>%
filter(Status == "Open") %>%
arrange(mc_number_anon,date_created) %>%
group_by(mc_number_anon) %>%
mutate(rounds_tot = n_distinct(ticket),
round =  row_number()) %>%
select(-completed, -paper_completed) %>%
ungroup %>%
group_by(rounds_tot) %>%
summarise(n_papers = n_distinct(mc_number_anon)) %>%
ungroup %>%
mutate(total = sum(n_papers),
frac_papers = n_papers/total)
n_rounds_plot <- ggplot(n_rounds, aes(x = rounds_tot, y = frac_papers)) +
geom_bar(stat = "identity", colour="white", fill="grey") +
theme_classic() +
scale_colour_brewer(palette = "Paired") +
labs(x = "Rounds", y = "Fraction of papers", title = "Distribution of review rounds")
ggsave(file.path(images,"n_rounds_plot.png"),
n_rounds_plot  +
labs(y=element_blank(),title=element_blank()))
n_rounds_plot
## By journal
n_rounds_journal <- jira.pyear %>%
mutate(completed = ifelse(grepl("Pending publication", Status, fixed = TRUE) == TRUE, 1, 0)) %>%
group_by(mc_number_anon) %>%
mutate(paper_completed = max(completed)) %>%
ungroup %>%
filter(paper_completed == 1) %>%
filter(Status == "Open") %>%
arrange(mc_number_anon,date_created) %>%
group_by(mc_number_anon) %>%
mutate(rounds_tot = n_distinct(ticket),
round =  row_number()) %>%
select(-completed, -paper_completed) %>%
group_by(Journal, rounds_tot) %>%
summarise(n_papers = n_distinct(mc_number_anon)) %>%
filter(Journal != "") %>%
group_by(Journal) %>%
mutate(total = sum(n_papers),
frac_papers = n_papers/total) %>%
ungroup
n_rounds_journal_plot <- ggplot(n_rounds_journal, aes(x = rounds_tot, y = frac_papers)) +
geom_bar(stat = "identity", colour="white", fill="grey") +
theme_classic() +
scale_colour_brewer(palette = "Paired") +
labs(x = "Rounds", y = "Fraction of papers", title = "Distribution of review rounds by journal") +
facet_grid(Journal ~ .) +
coord_flip()
ggsave(file.path(images,"n_rounds_journal_plot.png"),
n_rounds_journal_plot  +
labs(y=element_blank(),title=element_blank()))
n_rounds_journal_plot
---- below does not work - break here
#### Reason for Failure to Fully Replicate since December 1, 2019
reason_failure <- jira.filter.submitted %>%
transform(reason = if_else(ticket=="AEAREP-764",
"Bugs in code, Insufficient time available to replicator, Data not available",
as.character(reason))) %>%
cSplit("reason",",")
# Histogram
n_reason_failure_plot <- ggplot(reason_failure, aes(x = Journal, y = issues_cplt)) +
geom_bar(stat = "identity", colour="white", fill="grey") +
labs(x = "Journal", y = "Number of assessments", title = "Total assessments completed, by journal") +
theme_classic() +
coord_flip()
ggsave(file.path(images,"n_reason_failure_plot.png"),
n_reason_failure_plot  +
labs(y=element_blank(),title=element_blank()))
n_reason_failure_plot
### Load libraries
### Requirements: have library *here*
source(here::here("programs","config.R"),echo=TRUE)
global.libraries <- c("ggplot2","dplyr","here","tidyr","tibble","devtools")
results <- sapply(as.list(global.libraries), pkgTest)
pkgTest.github("data.table","Rdatatable")
## Non-standard - install of a page with same name
#pkgTest.github("stargazer-booktabs","markwestcott34")
install_github("markwestcott34/stargazer-booktabs")
library(stargazer)
# Read in data extracted from Jira, anonymized
jira.raw <- readRDS(file.path(jiraanon,"jira.anon.RDS"))
### Cleans working environment.
rm(list = ls())
gc()
### Load libraries
### Requirements: have library *here*
source(here::here("programs","config.R"),echo=TRUE)
global.libraries <- c("dplyr","tidyr","splitstackshape")
### Load libraries
### Requirements: have library *here*
source(here::here("programs","config.R"),echo=TRUE)
global.libraries <- c("ggplot2","dplyr","here","tidyr","tibble","devtools")
results <- sapply(as.list(global.libraries), pkgTest)
pkgTest.github("data.table","Rdatatable")
## Non-standard - install of a page with same name
#pkgTest.github("stargazer-booktabs","markwestcott34")
install_github("markwestcott34/stargazer-booktabs")
library(stargazer)
# Read in data extracted from Jira, anonymized
jira.raw <- readRDS(file.path(jiraanon,"jira.anon.RDS"))
jira.conf.raw <- read.csv(file.path(jirabase,"export_12-22-2020.csv"), stringsAsFactors = FALSE)
source('/mnt/local/slow_home/vilhuber/Workspace-non-encrypted/git/AEA/report-aea-data-editor-2020/programs/05_jira_stats_graphs.R', echo=TRUE)
names(jira.filter.submitted)
library(readxl)
dataEditorReport_20191128_20201127 <- read_excel("~/Workspace/git/AEA/report-aea-data-editor-2020/data/scholarone/dataEditorReport_20191128-20201127.xlsx",
sheet = "AER", skip = 30, n_max = 3)
View(dataEditorReport_20191128_20201127)
jira.anon <- readRDS(file.path(jiraanon,"jira.anon.RDS"))
### Load libraries
### Requirements: have library *here*
source(here::here("programs","config.R"),echo=TRUE)
global.libraries <- c("dplyr","here","tidyr","tibble","remotes","splitstackshape")
results <- sapply(as.list(global.libraries), pkgTest)
jira.anon <- readRDS(file.path(jiraanon,"jira.anon.RDS"))
names(jira.anon)
table(jira.anon$Journal)
global.libraries <- c("dplyr","here","tidyr","tibble","remotes","stringr")
results <- sapply(as.list(global.libraries), pkgTest)
jira.journals <- readRDS(file.path(jiraanon,"jira.anon.RDS")) %>%
select(Journal) %>%
mutate(Journal = str_replace(Journal,":"," "))
jira.journals
jira.journals <- readRDS(file.path(jiraanon,"jira.anon.RDS")) %>%
distinct(Journal) %>%
mutate(Journal = str_replace(Journal,":"," "))
jira.journals
readRDS(file.path(jiraanon,"jira.anon.RDS")) %>%
distinct(Journal) %>%
filter(! Journal %in% c("JEP","JEL","")) %>%
mutate(Journal = str_replace(Journal,":"," "))
readRDS(file.path(jiraanon,"jira.anon.RDS")) %>%
distinct(Journal) %>%
filter(! Journal %in% c("JEP","JEL","","AEA P&P")) %>%
mutate(Journal = str_replace(Journal,":"," "),
Journal = str_replace(Journal," Economics",""),
Journal = str_replace(Journal," Economic",""))
scholarone = "dataEditorReport_20191128-20201127.xlsx"
jira.journals <- readRDS(file.path(jiraanon,"jira.anon.RDS")) %>%
distinct(Journal) %>%
filter(! Journal %in% c("JEP","JEL","","AEA P&P")) %>%
mutate(Journal = str_replace(Journal,":"," "),
Journal = str_replace(Journal," Economics",""),
Journal = str_replace(Journal," Economic",""))
for ( j in jira.journals) {
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so
}
for ( j in jira.journals ) { print(j)}
for ( j in jira.journals) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so
}
for ( j in as.list(jira.journals)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so
}
for ( j in jira.journals ) { print(j)}
as.list(jira.journals)
as.list(jira.journals$Journal)
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so
}
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
print(so)
}
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
print(so)
}
exists(sox)
x <- tibble()
summary(x)
rounds <- tibble()
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so$Journal <- j
bind_rows(rounds,so)
print(so)
}
rounds
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3)
so$Journal <- j
rounds <- bind_rows(rounds,so)
print(so)
}
rounds
rounds <- tibble()
for ( j in as.list(jira.journals$Journal)) {
print(paste0("Reading in ",j))
so <- read_excel(file.path(basepath,"data","scholarone",scholarone),
sheet = j, skip = 30, n_max = 3) %>%
select(Rounds = `Total Rounds`,Count = `Manuscripts`)
so$Journal <- j
rounds <- bind_rows(rounds,so)
print(so)
}
rounds.all <- rounds %>%
group_by(Rounds) %>%
summarize(Rounds = sum(Rounds))
rounds.all
rounds.all <- rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count))
rounds.all
median(rounds.all$Rounds)
median(rounds.all$Count
)
rounds.all <- rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count)) %>%
ungroup() %>%
arrange(Round) %>%
mutate(Percent = cumsum(100*Count/sum(Count)))
rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count)) %>%
ungroup() %>%
arrange(Round)
rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count)) %>%
ungroup()
rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count)) %>%
ungroup() %>%
arrange(Rounds) %>%
mutate(Percent = cumsum(100*Count/sum(Count)))
median <- NA
median
for ( row in nrow(rounds.all) ) {
flag = 0
if ( rounds.all$Percent[row] > 50 & flag = 0 ) {
flag = 1
median = rounds.all$Rounds[row]
}
row = 1
nrow(rounds.all)
rounds.all <- rounds %>%
group_by(Rounds) %>%
summarize(Count = sum(Count)) %>%
ungroup() %>%
arrange(Rounds) %>%
mutate(Percent = cumsum(100*Count/sum(Count)))
rounds.all$Percent[row]
median <- NA
for ( row in nrow(rounds.all) ) {
flag = 0
if ( rounds.all$Percent[row] > 50 & flag == 0 ) {
flag = 1
median = rounds.all$Rounds[row]
}
median
for ( row in nrow(rounds.all) ) {
flag = 0
print(paste0(row,flag))
if ( rounds.all$Percent[row] > 50 & flag == 0 ) {
flag = 1
median = rounds.all$Rounds[row]
}
median <- NA
for ( row in nrow(rounds.all) ) {
flag = 0
print(paste0(row,flag))
if ( rounds.all$Percent[row] > 50 & flag == 0 ) {
flag = 1
median = rounds.all$Rounds[row]
}
rounds.all
for ( row in 1:nrow(rounds.all) ) {
flag = 0
print(paste0(row,flag))
if ( rounds.all$Percent[row] > 50 & flag == 0 ) {
flag = 1
median = rounds.all$Rounds[row]
}
median <- NA
for ( row in 1:nrow(rounds.all) ) {
print(paste0(row,flag))
if ( rounds.all$Percent[row] > 50 & is.na(median) ) {
median = rounds.all$Rounds[row]
}
median
rounds <- select(Journal,Rounds,Count)
rounds <- select(rounds,Journal,Rounds,Count)
rounds %>%
select(Journal,Rounds,Count) %>%
pivot_wider(names_from = Journal,values_from = Count)
source('/mnt/local/slow_home/vilhuber/Workspace-non-encrypted/git/AEA/report-aea-data-editor-2020/programs/07_table4.R', echo=TRUE)
source('~/Workspace/git/AEA/report-aea-data-editor-2020/programs/05_table2_stats.R', echo=TRUE)
source('~/Workspace/git/AEA/report-aea-data-editor-2020/programs/03_jira_dataprep.R', echo=TRUE)
source('~/Workspace/git/AEA/report-aea-data-editor-2020/programs/05_table2_stats.R', echo=TRUE)
sessionInfo()
source('~/Workspace/git/AEA/report-aea-data-editor-2020/programs/08_figure1_filesize.R', echo=TRUE)
icpsr.file_size
icpsr.file_size %>% group_by(intfilesize) %>% summarise(n=n())
icpsr.file_size %>% group_by(intfilesize) %>% summarise(n=n(),percent=n/sum(n))
icpsr.file_size %>% group_by(intfilesize) %>% summarise(n=n(),percent=100*n/sum(n))
icpsr.file_size %>% group_by(intfilesize) %>% summarise(n=n()) %>% ungroup() %>% mutate(percent=100*n/sum(n))
icpsr.file_size %>%
group_by(intfilesize) %>%
summarise(n=n()) %>%
ungroup() %>%
mutate(percent=100*n/sum(n)) -> icpsr.stats1
icpsr.stats1 %>% filter(intfilesize < 2)
icpsr.stats1 %>% filter(intfilesize < 2) %>% summarize(percent=sum(percent))
update_latexnums("pkgsizemean",icpsr.stats1 %>% filter(intfilesize < 2) %>% summarize(percent=sum(percent)) )
icpsr.stats1 %>%
filter(intfilesize >19) %>%
summarize(percent=sum(percent))
## Distribution of replication packages
icpsr.file_size <- icpsr %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d")) %>%
filter(date_created >= firstday, date_created < lastday) %>%
transform(filesize=Total.File.Size/(1024^3)) %>% # in GB
transform(intfilesize=round(filesize))
# get some stats
icpsr.file_size %>%
summarize(mean=round(mean(filesize),2),
median=round(median(filesize),2),
q75=round(quantile(filesize,0.9),2)) -> icpsr.stats
icpsr.file_size %>%
group_by(intfilesize) %>%
summarise(n=n()) %>%
ungroup() %>%
mutate(percent=100*n/sum(n)) -> icpsr.stats1
icpsr.stats1 %>%
filter(intfilesize < 2) %>%
summarize(percent=sum(percent))
icpsr.stats1 %>%
filter(intfilesize >19) %>%
summarize(percent=sum(percent))
icpsr.stats1 %>%
filter(intfilesize >19) %>%
summarize(round(percent=sum(percent)),0)
icpsr.stats1 %>%
filter(intfilesize >19) %>%
summarize(percent=sum(percent)) %>% round(0)
## Distribution of replication packages
icpsr.file_size <- icpsr %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d")) %>%
filter(date_created >= firstday, date_created < lastday) %>%
transform(filesize=Total.File.Size/(1024^3)) %>% # in GB
transform(intfilesize=round(filesize))
# get some stats
icpsr.file_size %>%
summarize(mean=round(mean(filesize),2),
median=round(median(filesize),2),
q75=round(quantile(filesize,0.9),2)) -> icpsr.stats
icpsr.file_size %>%
group_by(intfilesize) %>%
summarise(n=n()) %>%
ungroup() %>%
mutate(percent=100*n/sum(n)) -> icpsr.stats1
icpsr.stats
names(icpsr)
nrow(icpsr)
nrow(distinct(Project.ID))
nrow(distinct(icpsr,Project.ID))
nrow(icpsr.file_size)
nrow(distinct(icpsr.file_size,Project.ID)
)
View(icpsr.file_size)
max(icpsr.file_size$date_created)
icpsr %>%
distinct(Project.ID) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d"))
max(icpsr.file_size$date_created)
icpsr %>%
distinct(Project.ID,.keep_all = TRUE) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d"))
# Get the data
# Read in data extracted from openICPSR,
icpsr <- read.csv(file.path(icpsrbase,"AEA Report Fedora.csv"), stringsAsFactors = FALSE) %>%
select(-starts_with("X"))
names(icpsr)
icpsr %>%
distinct(Project.ID,.keep_all = TRUE) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d"))
icpsr %>%
distinct(Project.ID,.keep_all = TRUE) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d")) %>%
filter(date_created >= firstday - 30 )
firstday
firstday - 30
as.Date(firstday) - 30
icpsr %>%
distinct(Project.ID,.keep_all = TRUE) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d")) %>%
filter(date_created >= as.Date(firstday)-30, date_created <= lastday)
## Distribution of replication packages
icpsr.file_size <- icpsr %>%
distinct(Project.ID,.keep_all = TRUE) %>%
cSplit("Created.Date","T") %>%
mutate(date_created=as.Date(substr(Created.Date_1, 1,10), "%Y-%m-%d")) %>%
filter(date_created >= as.Date(firstday)-30, date_created <= lastday) %>%
transform(filesize=Total.File.Size/(1024^3)) %>% # in GB
transform(intfilesize=round(filesize))
icpsr.file_size %>% filter(filesize < 0.02)
